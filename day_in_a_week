import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:intl/intl.dart';

void() {
    runApp(MyApp());
}

class MyApp extends StatelessWidget {
@Override
Widget build(BuildContext context) {
    return MaterialApp(
        title:'Reminder App',
        theme:ThemeData(
            primarySwatch:Colors.blue,
        ),
        home:ReminderPage(),
    );
}
}

class ReminderPage extends StatefulWidget {
  @override
  _ReminderPageState createState()=>_ReminderPageState();
}

class_ReminderPageState extends State<ReminderPage> {
  final List<String> daysOfWeek = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];

  final List<String> activities =['Wake up','Go to gym','Breakfast','Meeting','Lunch','Quick nap','Go to library','Dinner','Go to sleep'];

  String selectedDay;
  TimeOfDay selectedTime;
  String selectedActivity;
  FlutterLocalNotificationsPlugin = flutterLocalNotificationsPlugin;

  @override
  void initState(){
    super.initState();
    var initializationSettingAndroid = AndroidInitializationSettings('app_icon');
    var initializationSettingIOS = IOSInitializationSettings();
    var initializationSettings = InitializationSettings(
      Android:InitializationSettingsAndroid,iOS:initializationSettingsIOS,
    );
    flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

    flutterLocalNotificationsPlugin.initialize(InitializationSettings);

  }
  Future<void>scheduleNotification() async {
    var scheduleNotificationDateTime = Time(
      selectedTime.hour,
      selectedTime.minute,
      0,
    );
     
     var androidPlatformChannelSpecifics = AndroidNotificationDetails(
      'your channel id',
      'your channel name',
      'your channel description',
      importance:importance.max,
      priority:Priority.high,
      ticker:'ticker',
     );

     var iOSPlatformChannelSpecifics = IOSNotificationDetails();
     var PlatformChannelSpecifics = NotificationDetails(
      Android:
      androidPlatformChannelSpecifics,
      iOS:iOSPlatformChannelSpecifics,
     );

     await flutterLocalNotificationsPlugin.showDailyAtTime(
      0,
      selectedActivity,
      'Reminder for $selectedActivity',
      scheduleNotificationDateTime,
      PlatformChannelSpecifics
     );
  }

  Future<void _selectTime(BuildContext context)
  async {
    final TimeOfDay picked = await showTimePicker(
      context:context,
      initialTime:selectedTime ??
      TimeOfDay.now(),
    );
    if(picked! = null && picked !=selectedTime) {
      setState((){
        selectedTime = picked;
      });
    }
  }

  @override
  Widget build(BuildContext context){
    return Scaffold(
      appBar:appBar(
        title:Text('Reminder App'),
      ),
      body:Padding(
        padding:const EdgeInsets.all(16.0),
        child:Column(
          childern:[DropdownButtonFormField<String>(
            decoration:InputDecoration(labelText:'Select Day'),
            value:selectedDay,
            items:daysOfWeek.map((day){
              return DropdownMenuItem(value:day,child:Text(day),);
            }).toList(),
            onChanged:(value) {
              setState(() {
                selectedDay = value;
              });
            },
          ),
          SizedBox(height:16.0),
          Row(mainAxisAlignment:MainAxisAlignment.spacebetween,
          childern:[
            Text(selectedTime == null? 'No time selected!':'Selected time : ${selectedTime.format(context)}',),
            ElevatedButton(
              onPressed:()=> _selectTime(context),
              child:Text('Select Time'),
            ),
          ],
          ),
          SizedBox(height: 16.0),
          DropdownButtonFormField<String>(decoration:InputDecoration(labelText:'Select Activity'),
          value:selectedActivity,
          items:activities.map((Activity) {
            return DropdownMenuItem(
              value:Activity,
              child:Text(Activity),
            );
          }).toList(),
          onChanged:(value) {
            setState(() {
              selectedActivity = value;
            });
          },
          ),
          SizedBox(height: 16.0),
          ElevatedButton(
            onPressed:() {
              if (selectedDay!=null && selectedTime != null && selectedActivity != null) {
                scheduleNotification();
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content:text('Reminder Set for $selectedActivity')),
                );
              }else{
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content:Text('Please fill all the fields')),
                );
              }
            },
            child:Text('Set Reminder'),
          ),
          ],
        ),
      ),
    );
  }
}

